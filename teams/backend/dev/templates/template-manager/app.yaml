---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::360300935709:role/template-manager-resource-podserviceaccountlinkedr-5Q8NYAS9PKG0
    eks.amazonaws.com/sts-regional-endpoints: 'true'
  name: template-manager-pods-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: template-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: template-manager
  template:
    metadata:
      labels:
        service: template-manager
        app: template-manager
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        runAsGroup: 1000
      serviceAccountName: template-manager-pods-sa
      volumes:
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: ebs-claim
      initContainers:
        - name: change-ownership-container
          image: busybox:latest
          command:
            - /bin/chown
            - '-R'
            - node:node
            - /data
          securityContext:
            runAsUser: 0
            privileged: true
          volumeMounts:
            - name: persistent-storage
              mountPath: /data
      containers:
        - image: 360300935709.dkr.ecr.us-west-2.amazonaws.com/dev-template-manager:736fcb4fb9e58c45196e824fc266f07d3dca76a7
          name: template-manager
          volumeMounts:
            - name: persistent-storage
              mountPath: /data
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 100Mi
          livenessProbe:
            httpGet:
              path: /health-status
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          startupProbe:
            httpGet:
              path: /health-status
              port: 8080
            failureThreshold: 30
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: template-manager
spec:
  ports:
    - port: 8080
      protocol: TCP
  type: NodePort
  selector:
    app: template-manager
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: template-manager
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/group.name: capstone
  labels:
    app: template-manager
spec:
  rules:
    - http:
        paths:
          - path: /templates
            pathType: Prefix
            backend:
              service:
                name: template-manager
                port:
                  number: 8080
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 4Gi
